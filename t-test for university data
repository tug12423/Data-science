import pandas as pd
import re
import pandas as pd
import pandas as pd
import re
import pandas as pd
from scipy.stats import ttest_ind
from scipy import stats
def df():
    df = pd.read_excel('gdplev.xls',header=None,skiprows=8,parse_cols = range(0, 7),names=['a','b','c','d','e','f','g'])
    df=df.drop(['d'],axis=1)
    df=df.loc(axis=1)['e','g']
    #if df[e].iloc[n]<df[e].iloc[n+1] & df[e].iloc[n+1]<df[e].iloc[n+2]:
    df['difference']=df['g'].diff() 
    df=df.dropna()
    #df=df.loc['2008q2':]
    return df
df()
def get_recession_end():
    df1=df()
    df1=df1.set_index('e')
    a=df1.index.get_loc('2008q2')
    df1=df1.reset_index()
    df1=df1.iloc[a:]
    for n in range(0,len(df1)-4):
        if (df1.iloc[n,2] > 0) and (df1.iloc[n+1,2] > 0) :
            return df1.iloc[n+1,0]
get_recession_end()
def get_recession_start():
    df1=df()
    for n in range(0,len(df1)-4):
        if (df1.iloc[n,2] < 0) and (df1.iloc[n+1,2] < 0) :
            return df1.iloc[n,0]
get_recession_start()

def get_recession_bottom():
    df1=df()
    df1=df1.set_index('e')
    a=df1.index.get_loc('2008q2')
    b=df1.index.get_loc('2009q4')
    df1=df1.reset_index()
    df1=df1.iloc[a:b]
    df1=df1.set_index('e')
    return np.argmin(df1['g'])

states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}
def convert_housing_data_to_quarters():
    df = pd.read_csv('City_Zhvi_AllHomes.csv')
    df.drop(["RegionID","Metro","CountyName","SizeRank"] , axis=1, inplace=True)
    df['State']=df['State'].replace({'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'},value=None)
    df=df.set_index(['State','RegionName'])
    df=df.loc[:,'2000-01':]
    df.columns = pd.to_datetime(df.columns)
    df=df.resample('Q', axis=1).mean()
    df = df.rename(columns=lambda col: '{}q{}'.format(col.year, col.quarter))
    return df
def get_list_of_university_towns():
    with open('university_towns.txt') as file:
        data = []
        for line in file:
            data.append(line[:-1])
    state_town = []
    for line in data:
        if line[-6:] == '[edit]':
            state = line[:-6]
        elif '(' in line:
            town = line[:line.index('(')-1]
            state_town.append([state,town])
        else:
            town = line
            state_town.append([state,town])
    state_college_df = pd.DataFrame(state_town,columns = ['State','RegionName'])
    return state_college_df
def run_ttest():
    housing = convert_housing_data_to_quarters()
    university_towns_raw = get_list_of_university_towns()
    university_towns=university_towns_raw.set_index(['State','RegionName'])
    recession_start=get_recession_start()
    quarter_before_recession = get_quarter_before_recession()    
    recession_bottom = get_recession_bottom()
    housing = housing[[quarter_before_recession, recession_bottom]]
    housing["price_ratio"] = (housing[quarter_before_recession]).div(housing[recession_bottom])
    #housing = housing.dropna()
    university_housing = pd.merge(university_towns, housing, how = "inner",left_index = True, right_index = True)
    non_university_housing = housing[~housing.index.isin(university_housing.index)]
    t_stat,p=ttest_ind(university_housing['price_ratio'],non_university_housing['price_ratio'],nan_policy='omit')
    if p < 0.01:
        different = True
    else:
        different = False
    if t_stat < 0:
        better = "university town"
    else:
        better = "non-university town"
    return (different, p, better)
    #return (non_university_housing)
    
run_ttest()

